(require '[environ.core :refer [env]])
env
(pprint env)
(require '[clojure.java.jdbc :as jdbc])
(require '[airpaper.db :as db])
(jdbc/query @db/spec ["SELECT * FROM emails;"])
(quit)
(require '[airpaper.queries.user :refer [reset-password find-by-email]])
(find-by-email "estsauver@gmail.com")
(find-by-email "estsauver+a@gmail.com")
(doc reset-password)
(reset-password 1 "zpZQel7QzO4Gry7GHglF5KFnnJT3AhnuGA9mhT4hhhpL6oeKeEiHgHZ0Fo6QCIJx)
(reset-password 1 "zpZQel7QzO4Gry7GHglF5KFnnJT3AhnuGA9mhT4hhhpL6oeKeEiHgHZ0Fo6QCIJx")
(quit)
(str f)
(.getName (class +))
(meta clojure.core/name)
(.-name +)
(class +)
(demunge (class +))
(type (class +))
(str (class +))
(demunge (str (class +)))
(name +)
(pprint +)
(doc +)
(str name)
(doc munge)
(munge +)
(doc demunge)
(doc demunge-str)
(demunge-str (munge +))
(demunge (munge +))
(name +)
(meta #'+
)
(meta #'odd?)
(defn fn-name [f] (-> f meta :name))
(fn-name odd?)
(defn fn-name [f] (-> f var resolve meta :name))
(defn fn-name [f] (-> f resolve meta :name))
(fn-name odd?)
(defn fn-name [f] (-> f quote resolve meta :name))
(fn-name odd?)
(defn fn-name [f] (-> f var meta :name))
(defn fn-namer [f] (-> f var meta :name))
(defn fn-namer [f] (-> f meta :name))
(fn-namer asd)
(fn-namer 'asd)
(fn-namer #'asd)
(fn-namer #'odd?)
(fn-namer #'+)
(defn fn-namer [f] (-> ~f var meta :name))
(defn fn-namer [f] (-> '(var f) meta :name))
(fn-namer #'+)
(fn-namer odd?)
(resolve odd?)
(resolve 'odd?)
(ns-resolve *ns* odd?)
(ns-resolve *ns* 'odd?)
(ns-resolve *ns* (symbol odd?))
(ns-resolve *ns* (quote odd?))
(meta odd?)
(meta #'odd?)
(meta 'odd?)
(meta (var odd?))
